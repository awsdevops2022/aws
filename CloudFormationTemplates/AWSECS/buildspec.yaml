# version: 0.2
# phases:
#   install:
#     commands:
#       - echo "Enabling docker daemon..."
#       - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
#       - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
#   pre_build:
#     commands:
#       - echo "Setting environment variables to tag image..."
#       - echo "Logging into AWS ECR..."
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#   build:
#     commands:
#       - echo "Build completed on `date`"
#       - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f CloudFormationTemplates/AWSECS/Dockerfile .
#       - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#   post_build:
#     commands:
#       - /bin/sh -c 'if [ $? -eq "0" ]; then echo "Build Successful on `date`"; else echo "Build failed"; fi'
#       - aws --version
#       - pip3 --version
#       - echo $Region
#       - echo "Pushing docker image to $IMAGE_REPO_NAME"
#       - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG


version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - ASSUME_ROLE_ARN="arn:aws:iam::819825051806:role/SecretsAssumeRoleTest"
      - TEMP_ROLE=$(aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name test)
      - export TEMP_ROLE
      - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')

  pre_build:
    commands:
      - echo Build started on 'date'
      - echo Building the Docker image...
      - docker build . --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN