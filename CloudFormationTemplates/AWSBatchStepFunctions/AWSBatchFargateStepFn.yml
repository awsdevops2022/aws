AWSTemplateFormatVersion: "2010-09-09"


Description: >-
  AWS StepFunctions and AWS Batch, ECS with Fargate, Databrew API


Parameters:
  computeEnvParameter:
    Description: The name of the compute env
    Type: String
    Default: computeEnv

  SelectKeyPair:
    Description: Select the key
    Type: 'AWS::EC2::KeyPair::KeyName'


  listofAZs:
    Description: Select the AZ
    Type: String
    Default: "ap-south-1a"
    AllowedValues:
      - ap-south-1a
      - ap-south-1b
      - us-east-2a

  
  BatchJobName:
    Description: Give Batch job name
    Type: String
    Default: "StepFnbatchJob"


Resources:
  batchVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "batchVPC-${AWS::StackName}"


  batchSubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref listofAZs
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: batchSubnetPublic1
      VpcId: !Ref batchVPC


  batchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "AWSBatch security group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref batchVPC


#AWS Batch
#reference : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Batch.html

  myComputeEnv:
    Type: 'AWS::Batch::ComputeEnvironment'
    Properties:
      ComputeEnvironmentName: !Join
        - ''
        - - !Ref computeEnvParameter
          - !Sub "-${AWS::StackName}"
      ComputeResources:
        MaxvCpus: 36    #make sure the number of vCPUs match the instance type in the parameters. Ref-https://aws.amazon.com/ec2/instance-types/
        SecurityGroupIds:
          - !GetAtt batchSecurityGroup.GroupId
        Subnets:
          - !Ref batchSubnetPublic
        Type: FARGATE
      State: ENABLED
      Type: MANAGED
      ServiceRole: !GetAtt BatchJobServiceRole.Arn


  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        #Command:
          #- String
        #Environment:
          #- Environment
        ExecutionRoleArn: !GetAtt ecsRoleInstance.Arn
        FargatePlatformConfiguration: 
          PlatformVersion: LATEST
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/base-images:latest'
        #JobRoleArn:
        #LinuxParameters:
          #LinuxParameters
        #LogConfiguration:
          #LogConfiguration
        # MountPoints:
        #  - ContainerPath: "/tmp/project"
        #    ReadOnly: false
        #    SourceVolume: "/tmp/SomeVolume"
        # Volumes:
        #   - Host:
        #       SourcePath: "/tmp"
        #     Name: SomeVolume
        #NetworkConfiguration:
          #NetworkConfiguration
        Privileged: false
        ReadonlyRootFilesystem: false
        ResourceRequirements:
          - Type: MEMORY
            Value: 1024 #in MiB
          - Type: VCPU
            Value: 0.5
        #Secrets:
          #- Secret
        #User: String
      JobDefinitionName: !Ref BatchJobName
      #Parameters: Json
      PlatformCapabilities:
       - FARGATE
      #PropagateTags: Boolean
      #RetryStrategy:
      Timeout:
        AttemptDurationSeconds: 120
      Type: container
    DependsOn: myComputeEnv



  MyJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref myComputeEnv
          Order: 1
      JobQueueName: !Sub "Batch-${AWS::StackName}"
      Priority: 1
      #SchedulingPolicyArn: !GetAtt FairSharePolicy.Arn
      State: ENABLED
      #Tags:
       #Key : Value
    DependsOn: myComputeEnv



#StepFn

  StepFnBatchOrchestration:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionString: #Below is the Amazon States Language. Reference - https://states-language.net
        !Sub
          - |-          
            {
              "Comment": "A description of my state machine",
              "StartAt": "Glue StartJobRun",
              "States": {
                "Glue StartJobRun": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun",
                  "Parameters": {
                    "JobName": "myJobName"
                  },
                  "Next": "Batch SubmitJob"
                },
                "Batch SubmitJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::batch:submitJob",
                  "Parameters": {
                    "JobName.$": "$.Input.JobName",
                    "JobDefinition": "arn:aws:batch:ap-south-1:819825051806:job-definition/StepFnbatchJob:21",
                    "JobQueue": "arn:aws:batch:ap-south-1:819825051806:job-queue/Batch-stack-glue-test",
                    "ContainerOverrides": {
                      "ResourceRequirements": [
                        {
                          "Type.$": "$.Type",
                          "Value.$": "$.Value"
                        }
                      ]
                    }
                  },
                  "End": true,
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "fallback"
                    }
                  ],
                  "TimeoutSeconds": 180,
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "BackoffRate": 1,
                      "IntervalSeconds": 30,
                      "MaxAttempts": 2
                    }
                  ]
                },
                "fallback": {
                  "Type": "Pass",
                  "Result": "failed !",
                  "End": true
                }
              }
            }
          - {BatchJobDefinitionArn: !Ref BatchJobDefinition}
      DefinitionSubstitutions:
        MyJobQueue: !Ref MyJobQueue
      RoleArn: !GetAtt StepFnExecutionRole.Arn
      StateMachineName: "StepFnBatchJob"
      StateMachineType: STANDARD  
      Tags:
        - Key: Name
          Value: "StepFnJob-batch"
    DependsOn:  
      - BatchJobDefinition
      - MyJobQueue
    

#IAM Roles and Policies
#ServiceRoleForBatch
#Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples

  BatchJobServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: Service role for AWS Batch
      Policies:
        - PolicyName: !Join
            - ''
            - - !Ref computeEnvParameter
              - !Sub "-batchJobPolicy-${AWS::StackName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeAccountAttributes'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeKeyPairs'
                  - 'ec2:DescribeImages'
                  - 'ec2:DescribeImageAttribute'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeSpotInstanceRequests'
                  - 'ec2:DescribeSpotFleetInstances'
                  - 'ec2:DescribeSpotFleetRequests'
                  - 'ec2:DescribeSpotPriceHistory'
                  - 'ec2:DescribeVpcClassicLink'
                  - 'ec2:DescribeLaunchTemplateVersions'
                  - 'ec2:CreateLaunchTemplate'
                  - 'ec2:DeleteLaunchTemplate'
                  - 'ec2:RequestSpotFleet'
                  - 'ec2:CancelSpotFleetRequests'
                  - 'ec2:ModifySpotFleetRequest'
                  - 'ec2:TerminateInstances'
                  - 'ec2:RunInstances'
                  - 'autoscaling:DescribeAccountLimits'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeLaunchConfigurations'
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'autoscaling:CreateLaunchConfiguration'
                  - 'autoscaling:CreateAutoScalingGroup'
                  - 'autoscaling:UpdateAutoScalingGroup'
                  - 'autoscaling:SetDesiredCapacity'
                  - 'autoscaling:DeleteLaunchConfiguration'
                  - 'autoscaling:DeleteAutoScalingGroup'
                  - 'autoscaling:CreateOrUpdateTags'
                  - 'autoscaling:SuspendProcesses'
                  - 'autoscaling:PutNotificationConfiguration'
                  - 'autoscaling:TerminateInstanceInAutoScalingGroup'
                  - 'ecs:DescribeClusters'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeTasks'
                  - 'ecs:ListAccountSettings'
                  - 'ecs:ListClusters'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:ListTaskDefinitionFamilies'
                  - 'ecs:ListTaskDefinitions'
                  - 'ecs:ListTasks'
                  - 'ecs:CreateCluster'
                  - 'ecs:DeleteCluster'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:DeregisterTaskDefinition'
                  - 'ecs:RunTask'
                  - 'ecs:StartTask'
                  - 'ecs:StopTask'
                  - 'ecs:UpdateContainerAgent'
                  - 'ecs:DeregisterContainerInstance'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'iam:GetInstanceProfile'
                  - 'iam:GetRole'
                Resource: '*'
              - Effect: Allow
                Action: 'ecs:TagResource'
                Resource:
                  - 'arn:aws:ecs:*:*:task/*_Batch_*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'iam:PassedToService':
                      - ec2.amazonaws.com
                      - ec2.amazonaws.com.cn
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource: '*'
                Condition:
                  StringEquals:
                    'iam:AWSServiceName':
                      - spot.amazonaws.com
                      - spotfleet.amazonaws.com
                      - autoscaling.amazonaws.com
                      - ecs.amazonaws.com
              - Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'ec2:CreateAction': RunInstances
      RoleName: !Join
        - ''
        - - !Ref computeEnvParameter
          - !Sub "-BatchJobServiceRole-${AWS::StackName}"



  ecsRoleInstance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      RoleName: !Join
        - ''
        - - !Ref computeEnvParameter
          - !Sub "-ecsRoleInstance-${AWS::StackName}"


  ecsroleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ecsRoleInstance
        

  #StepFnRole
  StepFnExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - states.amazonaws.com
                - events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Description: Step function execution role
      Policies:
        - PolicyName: StepFnExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow 
                Action: 
                  - "batch:SubmitJob"
                  - "batch:DescribeJobs"
                  - "batch:TerminateJob"
                Resource: "*"
              - Effect: Allow 
                Action: 
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"


#Troubleshooting AWS Batch ComputeEnvironment
#Ref: https://aws.amazon.com/premiumsupport/knowledge-center/batch-invalid-compute-environment/