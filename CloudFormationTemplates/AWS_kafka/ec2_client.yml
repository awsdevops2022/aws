AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template to download necessary packages and MSK tools
Parameters:
  Vpc:
    Description: Select vpc
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SubnetName:
    Description: Select subnet
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SelectAZ:
    Description: For t2.micro choose 1a or 1b.
    Type: AWS::EC2::AvailabilityZone::Name
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        # configSets:
        #   InstallAndRun:
        #     - Install
        #     - Configure
        config:
          sources:
            /home/ec2-user: "https://archive.apache.org/dist/kafka/2.8.1/kafka_2.12-2.8.1.tgz"
          commands:
            MSKIAMJarFile:
              command: "wget https://github.com/aws/aws-msk-iam-auth/releases/download/v1.1.1/aws-msk-iam-auth-1.1.1-all.jar"
              cwd: "/home/ec2-user/kafka_2.12-2.8.1/libs"
          files:
            /home/ec2-user/kafka_2.12-2.8.1/bin/client.properties:
              content: !Join
                - ''
                - - |
                    security.protocol=SASL_SSL
                  - |
                    sasl.mechanism=AWS_MSK_IAM
                  - >
                    sasl.jaas.config=software.amazon.msk.auth.iam.IAMLoginModule required;
                  - >
                    sasl.client.callback.handler.class=software.amazon.msk.auth.iam.IAMClientCallbackHandler
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+
                  
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  # - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: ami-0d13e3e640877b0b9
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref SelectAZ
      SubnetId: !Ref SubnetName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum install -y java-11
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            # - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS access via port 80 and 443
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0