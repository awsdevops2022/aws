AWSTemplateFormatVersion: '2010-09-09'
Description: To push when an update in GitHub files to s3

Parameters:
  GithubRepo:
    Description: The repository name
    Type: String
    Default: awsdevops2022/aws

  listofAZs:
    Description: Select the AZ
    Type: String
    Default: "ap-south-1a"
    AllowedValues:
      - ap-south-1a
      - ap-south-1b
      - us-east-2a


Resources:
  Mys3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-demo-push-to-s3


  #ECR

  DemoEcrRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: demo-s3-push
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: CodeBuildAccess
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"


  #CodeBuild

  DemoCreateImageBuild:
    Type: AWS::CodeBuild::Project
    DependsOn: DemoCodeBuildRole
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Description: Builds docker image
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables: 
            #BUILD VARIABLES
          - Name: "AWS_DEFAULT_REGION"
            Value: !Sub "${AWS::Region}"
          - Name: "AWS_ACCOUNT_ID"
            Value: !Sub "${AWS::AccountId}"
          - Name: "IMAGE_REPO_NAME"
            Value: !Ref DemoEcrRepo
          - Name: "IMAGE_TAG"
            Value: "latest"
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: DockerBuildImage
      QueuedTimeoutInMinutes: 5
      ServiceRole: !GetAtt DemoCodeBuildRole.Arn                    #Check this
      Source: 
        BuildSpec: CloudFormationTemplates/AWS_Batch_s3_ECS/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 8


  DemoCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref Mys3Bucket
        Type: S3
      Name: DemoCodePipeline
      RoleArn: !GetAtt DemoCodepipelineRole.Arn
      Stages: 
        - 
          Name: Source
          Actions:
            - 
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Name: SourceAction
              Configuration:
                ConnectionArn: arn:aws:codestar-connections:ap-south-1:819825051806:connection/7f7da864-75f1-4777-a29c-146e9241011a
                FullRepositoryId: !Ref GithubRepo
                BranchName: "development"
              OutputArtifacts: 
                - Name: DemoFirstOutputArtifact
              RunOrder: 1
        - 
          Name: ImageBuild
          Actions: 
            - 
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - 
                  Name: DemoBuildArtifact
              RunOrder: 1
              Name: DockerImageBuild
              Configuration:
                ProjectName: !Ref DemoCreateImageBuild
              InputArtifacts:
                - Name: DemoFirstOutputArtifact


  #IAM Roles

  #CodePipeline Role

  DemoCodepipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      Description: Codepipeline to build Docker image role
      Policies:
        - 
          PolicyName: DemoCodepipelineExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - ecs-tasks.amazonaws.com
              - Action:
                  - 'codestar-connections:UseConnection'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'ecs:*'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuildBatches'
                  - 'codebuild:StartBuildBatch'
                Resource: '*'
                Effect: Allow


  #CodeBuild Role
  DemoCodeBuildRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: DemoCBRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Principal:
                Service: 
                  - "codebuild.amazonaws.com"
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 
            arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        Path: /service-role/
        Policies:
          - PolicyName: "CodeBuildAccessPolicy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Resource:
                    -  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                - Effect: Allow
                  Resource: '*'
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketAcl
                    - s3:GetBucketLocation
                - Action:
                    - 'ecr:BatchCheckLayerAvailability'
                    - 'ecr:CompleteLayerUpload'
                    - 'ecr:GetAuthorizationToken'
                    - 'ecr:InitiateLayerUpload'
                    - 'ecr:PutImage'
                    - 'ecr:UploadLayerPart'
                  Resource: '*'
                  Effect: Allow
                -
                  Effect: Allow
                  Action:
                    - 'secretsmanager:GetSecretValue'
                    - 'secretsmanager:ListSecrets'
                  Resource: '*'